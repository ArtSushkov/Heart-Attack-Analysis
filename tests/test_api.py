"""
Модуль тестирования API для FastAPI-приложения
Использует pytest и TestClient из FastAPI для проверки конечных точек
"""

# Импорт необходимых библиотек
import pytest
from fastapi.testclient import TestClient  # Тестовый клиент для имитации запросов к API
from app.main import app  # Импорт экземпляра FastAPI приложения из основного модуля

# Инициализация тестового клиента с нашим приложением
# Этот клиент будет использоваться для выполнения HTTP-запросов к API во время тестов
client = TestClient(app)


def test_health_check():
    """
    Тестирование конечной точки проверки работоспособности (/health)
    
    Проверяет:
    1. Доступность эндпоинта
    2. Корректность формата ответа
    3. Соответствие ожидаемому статусу
    """
    # Выполнение GET-запроса к эндпоинту /health
    response = client.get("/health")
    
    # Проверка, что сервер вернул статус 200 (OK)
    assert response.status_code == 200
    
    # Проверка, что в ответе содержится JSON с полем 'status'
    # и его значение равно "OK"
    assert response.json()["status"] == "OK"


def test_predict_endpoint():
    """
    Тестирование конечной точки прогнозирования (/predict)
    
    Проверяет:
    1. Обработку файлов CSV
    2. Структуру ответа
    3. Согласованность данных в ответе
    
    Тестовые данные берутся из файла tests/test_sample.csv
    """
    # Открытие тестового CSV-файла в бинарном режиме
    # Используется контекстный менеджер для гарантированного закрытия файла
    with open("tests/test_sample.csv", "rb") as f:
        # Отправка POST-запроса с файлом на эндпоинт /predict
        # Формирование multipart-формы с файлом:
        # - 'file': ключ формы для загрузки файла
        # - ('test_sample.csv', f, 'text/csv'): кортеж из:
        #   * Имя файла (может отличаться от реального)
        #   * файловый объект
        #   * MIME-тип контента
        response = client.post(
            "/predict",
            files={"file": ("test_sample.csv", f, "text/csv")}
        )
    
    # Проверка успешного выполнения запроса (статус 200)
    assert response.status_code == 200
    
    # Преобразование ответа в JSON для проверки структуры данных
    data = response.json()
    
    # Проверка наличия обязательных полей в ответе
    assert "ids" in data          # Должен содержать идентификаторы записей
    assert "predictions" in data  # Должен содержать прогнозы моделей
    
    # Проверка согласованности данных: количество идентификаторов
    # должно соответствовать количеству прогнозов
    assert len(data["ids"]) == len(data["predictions"])
